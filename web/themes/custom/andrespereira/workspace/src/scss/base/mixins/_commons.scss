@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em;
}

@mixin bdesktop {
  @media (min-width: #{$big-desktop-width}) {
    @content;
  }
}

@mixin btn {
  border: 0;
  border-radius: 0;
  // line-height: 0;
  font-weight: normal;
}


@mixin bgcover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}

@mixin coverAbsolute ($z) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $z;
}

@mixin coverFixed ($z) {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $z;
}


@mixin bgparallax {
  background-attachment: fixed;
  background-size: cover;
  background-position: center top;
}

@mixin iconBg($path, $size:100%) {
  background-image: url($path);
  background-size: $size;
  background-repeat: no-repeat;
  background-position: center center;
  text-indent: -999999px;
  overflow: hidden;
}


// Define default font size
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font($size) {
  font-size: $size;
  font-size: rem($size);
}

// Placeholders
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }

  &:-moz-placeholder {
    @content
  }

  &::-moz-placeholder {
    @content
  }

  &:-ms-input-placeholder {
    @content
  }
}

@mixin fluid-aspect($ratio: 1 1, $selector: "> :first-child") {
	$selector: unquote($selector);

	padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1));
	position: relative;

	#{$selector} {
		left: 0;
		height: 100%;
		position: absolute;
		top: 0;
    width: 100%;
    object-fit: cover;
	}
}

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: linear-gradient(to right, $start-color, $end-color);
  } @else if $orientation == 'half' {
    background: linear-gradient(to left, $start-color 50%, $end-color 50%);
  } @else {
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin container($width:1140px) {
  width: 100%;
  padding-right: rem(15px);
  padding-left: rem(15px);
  margin-right: auto;
  margin-left: auto;
  max-width: #{$width};
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Define default font size
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font($size) {
  font-size: $size;
  font-size: rem($size);
}

// Placeholders
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }

  &:-moz-placeholder {
    @content
  }

  &::-moz-placeholder {
    @content
  }

  &:-ms-input-placeholder {
    @content
  }
}



// Clearfix mixin
%clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin cont {
  margin: 0 auto;
  max-width: 1300px;
  width: 100%;
}

// Define default font size
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1.6rem;
}

@mixin font($size) {
  font-size: $size;
  font-size: rem($size);
}

// Gradients
@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Arrows
@mixin arrow($direction, $color, $size) {
  display: block;
  height: 0;
  width: 0;

  @if $direction == "top" {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == "right" {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if $direction == "bottom" {
    border-top: $size solid $color;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  } @else if $direction == "left" {
    border-top: $size solid transparent;
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
  } @else if $direction == "top-left" {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == "top-right" {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  } @else if $direction == "bottom-left" {
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == "bottom-right" {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
}

// Pseudo
@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;

  @if $position == "vertical" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == "horizontal" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Placeholders
@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  ::-moz-placeholder {
    @content;
  }
  :-ms-input-placeholder {
    @content;
  }
}


/* // Buttons
@mixin defBtn($size, $padding, $color, $bg, $hover) {
  display: inline-block;
  font-size: $size;
  padding: $padding;
  text-align: center;
  color: $color;
  background-color: $bg;
  transition: all 0.4s;
  border-radius: 0;
  cursor: pointer;

  &:hover {
    background-color: $hover;
    color: $color;
  }
}

@mixin defBtnGeneral($size, $color, $bg, $hover, $color2) {
  display: inline-block;
  font-size: $size;
  text-align: center;
  color: $color;
  background-color: $bg;
  transition: all 0.4s;
  border-radius: 0;
  cursor: pointer;
  text-decoration: none;
  &:hover {
    background-color: $hover;
    color: $color2;
  }
} */

@mixin flex($type) {
  @if $type == "column" {
    display: flex;
    flex-direction: column;
  } @else if $type == "row" {
    display: flex;
    flex-direction: row;
  } @else if $type == "wrap" {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  } @else if $type == "center" {
    align-items: center;
    display: flex;
    justify-content: center;
  }
}

@mixin line-clamp($number) {
  display: -webkit-box;
  -webkit-line-clamp: $number;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
